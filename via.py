import tkinter as tk
from tkinter import ttk, messagebox

class VIAPersonalityTest:
    def __init__(self, root):
        self.root = root
        self.root.title("VIA人格测试")
        self.questions = [
           "1、我觉得这个世界很有趣",
    "2、我总是尽全力参加教育活动",
    "3、我总是为自己的行动找出理由",
    "4、不断产生新奇和不同的念头是我的一个长处",
    "5、我可以充分了解自己周围的环境",
    "6、我对正在发生的事情有全面的认识",
    "7、面对强烈的反对时，我经常捍卫自己的立场",
    "8、我从来不会在任务没有完成前就放弃",
    "9、我一向遵守承诺",
    "10、我从不会借故太忙，而不去帮助朋友",
    "11、我总是乐于和别人建立关系，即使有风险存在",
    "12、我从不会错过小组会议或团体活动",
    "13、我总能承认自己的错误",
    "14、在团体里，我总是尽力确保每一个人都有在团体内的感觉",
    "15、对我来说，吃健康食品没有困难",
    "16、我从未故意伤害过任何人",
    "17、对我来说，生活在充满美的世界中是很重要的",
    "18、我总是向关心我的人表达感谢",
    "19、我总是对事物抱着乐观的态度",
    "20、我注重精神生活",
    "21、我以谦逊的态度对待发生在自己身上的好事",
    "22、当我的朋友心情不好时，我努力逗他们开心",
    "23、我想要全身心投入到生活中，而不是像一个局外人那样旁观",
    "24、对我来说，过去的事情就让它过去了",
    "25、我从不感到无聊",
    "26、我愿意学习新事物",
    "27、我总是会从事物的正反两面去考虑问题",
    "28、当别人告诉我应该怎么做一件事时，我会主动想出可以取得相同结果的其他方法",
    "29、我知道如何在不同的社交场合扮演适合自己的角色",
    "30、不管发生什么，我都清楚地知道什么是最重要的",
    "31、我曾经因为能够直面问题，而摆脱了情绪困扰",
    "32、我做事从不虎头蛇尾",
    "33、我的朋友认为我能够保持事情的真实性",
    "34、能为朋友做些小事让我感到很享受",
    "35、我身边有人像关心自己一样关心我，在乎我的感受",
    "36、我非常喜欢成为团体中的一份子",
    "37、能够妥协是我性格里的一个重要部分",
    "38、作为一个组织的领导，不管成员有过怎样的经历，我都对他们一视同仁",
    "39、就算美食当前，我也不会吃过量",
    "40、小心驶得万年船”是我喜欢的座右铭之一",
    "41、我会因为别人的仁慈善良而感动的几乎落泪",
    "42、听到一些伟大的善举时，我的心会受到震撼",
    "43、当别人看到事物消极的一面时，我总能乐观地发现它积极的一面",
    "44、我实践着我的宗教信仰",
    "45、我不喜欢在人群中突出自己",
    "46、大多数人认为和我在一起很有有趣",
    "47、我从来没有早上不想起床的感觉",
    "48、我很少怀有怨恨",
    "49、我总是忙着做一些有趣的事情",
    "50、学习新事物让我感到兴奋",
    "51、只有掌握了所有信息以后，我才会做出决定",
    "52、我喜欢想一些新的方法去解决问题",
    "53、无论环境怎样，我都可以适应",
    "54、我拥有优秀的世界观",
    "55、我会毫不犹豫地公开阐述一个不受欢迎的观点",
    "56、我是一个以目标为行动导向的人",
    "57、我相信真诚是信任的基础",
    "58、我尽力让那些沮丧的人振作起来",
    "59、有人能够接受我的缺点",
    "60、我是一个极其忠诚的人",
    "61、我公平地对待所有人，不管他们是什么身份",
    "62、我的优点之一是能够让团体成员很好地协作，哪怕他们之间存在分歧",
    "63、我是一个高度自律的人",
    "64、我总是思考以后再讲话",
    "65、看到美好的事物时，总能触动我内心的情愫",
    "66、至少每天一次，我会暂停忙碌的生活节奏，细数值得自己感激的人和事",
    "67、即使面对挑战，我也总对将来充满希望",
    "68、在困难的时刻，我的信仰从来没有离弃过我",
    "69、我从不表现的特殊",
    "70、我抓住每一个机会，用欢笑点亮别人的生活",
    "71、我做事一向全神贯注",
    "72、我从不试图报复",
    "73、我对世界总是充满了好奇",
    "74、每一天我都期盼着学习和成长的机会",
    "75、我欣赏自己批判性的思维",
    "76、我为自己的原创力而感到骄傲",
    "77、我有能力令其他人对一些事物产生兴趣",
    "78、我从来没有因为给朋友提供了错误意见而导致他（她）犯错",
    "79、我支持自己坚信的事，即使会产生负面的结果",
    "80、即使会遇到阻碍，我也要把事情完成",
    "81、即使会造成伤害，我也会说出真相",
    "82、我喜欢令别人快乐",
    "83、对某些人来说，我是他们生命里最重要的人",
    "84、在团队中工作可以令我发挥出最佳状态",
    "85、对我来说，每个人的权利同样重要",
    "86、我非常擅长策划集体活动",
    "87、我会控制自己的情绪",
    "88、朋友们认为，我能在自己的言行上做出聪明的抉择",
    "89、我能看到被别人忽视的美好事物",
    "90、如果收到礼物，我总是要让礼物的人知道我很喜欢",
    "91、对于自己希望在将来发生的事，我的脑子里有一幅清晰的图画",
    "92、我有明确的生活目标",
    "93、我从不吹嘘自己的成就",
    "94、不论在任何情形下，我都尝试寻找乐趣",
    "95、我热爱自己所做的事情",
    "96、我一向容许别人把错误留在过去，重新开始",
    "97、我对各式各样的活动都感到兴奋",
    "98、我是个真正的终生学习者",
    "99、我的朋友欣赏我能客观地看待事物",
    "100、我总能想出新方法去做事情",
    "101、我总能知道别人行事的动机",
    "102、别人认为我的智慧超越了我这个年龄应有的程度",
    "103、别人还在侃侃而谈时，我已经开始付诸行动",
    "104、我是个工作勤奋的人",
    "105、我的承诺值得信赖",
    "106、在过去的一个月里，我主动帮助过我的邻居",
    "107、不管我的家人和好友做了什么，都不能阻止我对他们的爱",
    "108、我从不对外人说我所处团体的坏话",
    "109、我给每个人机会",
    "110、作为一个有效能的领导者，我一视同仁",
    "111、我从不想要长远来看有害的东西，即使他们在短期内让我感觉不错",
    "112、我总是避免参加会对身体造成伤害的活动",
    "113、我经常被电影里所描述的美感动的说不出话",
    "114、我是一个充满感恩之心的人",
    "115、如果得到不好的成绩或评价，我会专注于下次机会，并计划做的更好",
    "116、在过去的二十四小时内，我花了约30分钟进行祈祷、冥想或深思",
    "117、我为自己是一个普通人而骄傲",
    "118、我试着在所做的任何事情中添加一点幽默的成份",
    "119、我期待新的一天的到来",
    "120、我希望人们能学会原谅和遗忘",
    "121、我有很多兴趣爱好",
    "122、我经常尽量去参观博物馆",
    "123、如果需要，我可以成为一个高度理性的思考者",
    "124、朋友认为我有各种各样的新奇想法",
    "125、我一向能与刚认识的朋友融洽相处",
    "126、我总能看到事物的全部",
    "127、我总能捍卫自己的信念",
    "128、我不言放弃",
    "129、我忠于自己的价值观",
    "130、在朋友生病时，我总会致电电话",
    "131、我总能感受到自己生命中有爱存在",
    "132、维护团体内的和睦对我来说很重要",
    "133、我极其坚持正义和公平的原则",
    "134、我相信人的本性让我们聚在一起，为了共同的目标而努力",
    "135、我可以一直节食",
    "136、行动前，我总是先考虑可能出现的结果",
    "137、我总能觉察到周围环境里存在的自然美",
    "138、我竭尽所能去答谢那些对我好的人",
    "139、我对未来五年内想要做的事情有所计划",
    "140、我的信仰塑造了现在的我",
    "141、我比较喜欢让其他人谈论他们自己",
    "142、我从不让沮丧的境遇带走我的幽默感",
    "143、我精力充沛",
    "144、我总是愿意给他人改正错误的机会",
    "145、在任何情形下，我都能找到乐趣",
    "146、我常常阅读",
    "147、深思熟虑是我的特点之一",
    "148、我经常有原创性的思维",
    "149、我善于体会到的感受",
    "150、我对人生有成熟的看法",
    "151、我总能直面自己的恐惧",
    "152、我工作时从不被别的事情分散精力",
    "153、不曾夸大过自己，我为此而骄傲",
    "154、我为他人的好运而兴奋，就像自己获得好运一样",
    "155、我能够表达对别人的爱",
    "156、我在任何条件下都支持我的队员或组员",
    "157、我不会无功受禄",
    "158、朋友总认为我是一个强硬但公正的领导",
    "159、我总是认为“知足常乐”",
    "160、我一向对错分明",
    "161、我非常喜欢各种形式的艺术",
    "162、我对生命中所得到的一切表示感激",
    "163、我知道，有一天我会成功实现自己所设定的目标",
    "164、我相信每一个人都有生存的目的",
    "165、我很少刻意引人注目",
    "166、我很有幽默感",
    "167、我会迫不及待地开始一项新的计划",
    "168、我很少试图报复别人",
    "169、我很会自娱自乐",
    "170、如果想要了解什么，我会立马去图书馆或者是互联网查阅",
    "171、我总会权衡利弊",
    "172、我的想象力超过朋友",
    "173、我清楚自己的感觉和动机",
    "174、别人喜欢来征询我的建议",
    "175、我曾经战胜过痛苦与失望",
    "176、一旦决定做什么事情后，我会坚持下去",
    "177、我讨厌装腔作势",
    "178、我享受善待他人的爱",
    "179、我能够接受别人的爱",
    "180、即使不同意团体领袖的观点，我还是会尊重他",
    "181、即使不喜欢一个人，我也会公平地对待他（她）",
    "182、作为一个团体领导，我尽量让每一个成员快乐",
    "183、无论在办公室、学校或家中，我总是在限期之前完成各种任务",
    "184、我是个非常小心的人",
    "185、他人认为生命中理所当然存在着的简单事物，我却会对它们心存敬畏",
    "186、当审视自己的生活时，我发现有很多地方值得感恩",
    "187、我确信自己的做事方法会得到最佳的效果",
    "188、我相信一种全宇宙的力量，比如神",
    "189、别人告诉我，谦虚是我最显著的优点之一",
    "190、能使别人微笑或大笑，令我感到满足",
    "191、我迫不及待地想要知道自己未来的生活是什么样子",
    "192、通常情况下，我愿意给别人第二次机会",
    "193、我认为我的生活非常有趣",
    "194、我阅读大量各种各样的书籍",
    "195、我会试为自己的重大决定找出好的理由",
    "196、上个月，我为自己生命中的难题想出了一个创新性的解决方法",
    "197、我总是知道说什么话可以让别人感觉良好",
    "198、或许不会跟别人说起，但我认为自己是个智者",
    "199、听到有人说卑鄙的事情，我总会大声提出抗议",
    "200、做计划时，我有把握付诸实行",
    "201、朋友总说我是一个实际的人",
    "202、能让别人一起分享成功所带来的公众瞩目，这让我感到高兴",
    "203、在我的邻居、同事或同学中，有我真正关心的人",
    "204、尊重团体的决定对我来说很重要",
    "205、我认为每个人都应该有发言权",
    "206、作为团体领导者，我认为每个成员都有对团体所做的事发表意见的权利",
    "207、对我来说，练习与表演一样重要",
    "208、我总是谨慎地做出决定",
    "209、我经常渴望能感受伟大的艺术，比如音乐、戏剧或绘画",
    "210、每天我都心怀深刻的感激之情",
    "211、情绪低落时，我总是回想生活中美好的事情",
    "212、信仰使我的生命变得重要",
    "213、没有人认为我是一个自大的",
    "214、我更相信人生是游乐场而不是战场",
    "215、早晨醒来，我会为了新一天天存在的无限可能性而兴奋",
    "216、我不想看到任何人受苦，哪怕是我最大的敌人",
    "217、我非常喜欢听其他国家的文化和历史",
    "218、我非常喜欢阅读非小说书籍作为消遣",
    "219、朋友非常欣赏我的判断力",
    "220、我强烈希望未来的一年我能够做一些创新的事情",
    "221、很少人能利用我",
    "222、别人认为我是个很聪明的人",
    "223、我是一个勇敢的人",
    "224、能得到自己想要的，是因为我付出了努力",
    "225、别人相信我能替他们保守秘密",
    "226、我总是倾听别人讲述他们的问题",
    "227、和他人分享我的感受是一件容易的事",
    "228、为了集体的利益，我愿意牺牲个人利益",
    "229、我相信聆听每个人的意见是值得的",
    "230、大权在握的时候，我不会因为一些小事而去责怪别人",
    "231、我定时锻炼身体",
    "232、我想象不到骗人和说谎时什么感觉",
    "233、在过去的一年里，我创造了一些美好的东西",
    "234、在我的生命中，我一直拥有别人给予的祝福",
    "235、我期待会发生最好的事情",
    "236、我的生命有一个使命",
    "237、别人都因我的谦逊而走近我",
    "238、我因富于幽默而被众人所知",
    "239、人们形容我为一个热情洋溢的人",
    "240、当人家待我不好时，我会用谅解去回应"

        ]
        
        self.dimension_names = [
           "1、好奇心：对新事物有浓厚的兴趣：开放式体验，乐于进行探索和发现",
    "2、爱学习：愿意掌握新的技能及知识，不管是出于自愿或是其他要求",
    "3、头脑开明：通过全方位信息来思考事物，做决定时能公平权衡所有的证据；良好的判断力",
    "4、创造力：思索新颖而有价值的方法来产生概念和做事情",
    "5、社会智商（情绪智商，个人智商）：了解他人以及自己的目的和感觉",
    "6、洞察力（智慧）：能对他人提出明智的建议：能着眼于对自己对人有意义的世界",
    "7、勇敢（勇气）：不畏威胁：挑战、困顿或苦痛，依觉悟而行，不论其是否被普遍认同",
    "8、持久（有毅力）：做事有始有终：坚持行为方向，不论障碍险阻",
    "9、正直（可靠，诚实）：自我表现诚恳；对自己的感觉和行为负责",
    "10、善良（慷慨，关怀，同情，无私的爱）：为他人帮忙、做好事",
    "11、爱：珍爱与他人的亲密关系，有能力与他人建立爱的联络，相互关照",
    "12、公民权（社会责任，忠诚，团队协作）：作为集体或团队中的一员好好工作：对集体忠诚",
    "13、公正：依照公平和正义的观念平等对待所有人：避免让人人偏见误导对他人的判定",
    "14、领导能力：促进集体中的个人在其中能完成事情；并且善于维持良好的集体关系",
    "15、自律（自控）：管理自己的感觉和行为；守纪律；控制自己的欲望和情绪",
    "16、谨慎：细心的做出自己的选择；不会冒不当的风险；不说也不会做事后悔的事",
    "17、欣赏美丽和卓越（敬畏，赞叹，上进）：欣赏美丽、卓越的事物；欣赏人们在生活的不同领域的娴熟表现",
    "18、感恩：知道并感谢发生的好事情；多多表达谢意",
    "19、希望（对未来乐观）：对将来有最好的展望，并努力实现它；同时认为未来是可以掌控的",
    "20、精神信仰（虔诚，守信，有追求）：有对更高追求、生活意义以及宇宙意义的信仰",
    "21、谦虚/谦逊：让成绩说话；不自夸、不自大",
    "22、幽默（爱玩）：喜欢笑，喜欢逗乐；给他人带来欢笑；看事物的光明面",
    "23、有活力（热情积极，有精力）：生活充满激情和能量；感觉活跃、活泼",
    "24、宽恕和仁慈：宽恕做错事的人；接纳他人的短处；给予他人第二次机会；不心怀报复"
        ]
        
        # 初始化回答记录数组
        self.answers = [0] * len(self.questions)
        self.current_question = 0
        
        # 创建界面元素
        self.create_widgets()
        self.show_question()
    
    def create_widgets(self):
        # 问题显示区域
        self.question_label = ttk.Label(
            self.root, 
            text="", 
            wraplength=500, 
            font=('Arial', 12), 
            justify='center'
        )
        self.question_label.pack(pady=20)
        
        # 评分选项
        self.rating_var = tk.IntVar()
        rating_frame = ttk.Frame(self.root)
        rating_frame.pack(pady=10)
        
        for i in range(1, 6):
            ttk.Radiobutton(
                rating_frame, 
                text=str(i), 
                variable=self.rating_var, 
                value=i
            ).pack(side=tk.LEFT, padx=5)
        
        # 说明标签
        ttk.Label(
            self.root, 
            text="1=非常不符合, 5=非常符合", 
            font=('Arial', 10)
        ).pack(pady=5)
        
        # 导航按钮
        button_frame = ttk.Frame(self.root)
        button_frame.pack(pady=20)
        
        self.prev_button = ttk.Button(
            button_frame, 
            text="上一题", 
            command=self.prev_question
        )
        self.prev_button.pack(side=tk.LEFT, padx=10)
        
        self.next_button = ttk.Button(
            button_frame, 
            text="下一题", 
            command=self.next_question
        )
        self.next_button.pack(side=tk.LEFT, padx=10)
        
        # 进度显示
        self.progress_label = ttk.Label(
            self.root, 
            text="", 
            font=('Arial', 10)
        )
        self.progress_label.pack(pady=5)
    
    def show_question(self):
        if self.current_question < len(self.questions):
            self.question_label.config(text=self.questions[self.current_question])
            self.rating_var.set(self.answers[self.current_question])
            self.update_progress()
            
            # 禁用/启用导航按钮
            self.prev_button.config(state=tk.NORMAL if self.current_question > 0 else tk.DISABLED)
            next_text = "下一题" if self.current_question < len(self.questions) - 1 else "查看结果"
            self.next_button.config(text=next_text)
        else:
            self.show_results()
    
    def update_progress(self):
        progress = f"进度: {self.current_question + 1}/{len(self.questions)}"
        self.progress_label.config(text=progress)
    
    def prev_question(self):
        if self.current_question > 0:
            self.save_answer()
            self.current_question -= 1
            self.show_question()
    
    def next_question(self):
        if self.rating_var.get() == 0:
            messagebox.showwarning("提示", "请选择一个评分")
            return
        
        self.save_answer()
        
        if self.current_question < len(self.questions) - 1:
            self.current_question += 1
            self.show_question()
        else:
            self.show_results()
    
    def save_answer(self):
        self.answers[self.current_question] = self.rating_var.get()
    
    def calculate_dimension_scores(self):
        # 计算24个维度的分数
        dimension_scores = [0] * 24
        
        for i in range(24):
            # 每组24个问题中的第i个问题
            for j in range(10):  # 每组有10个问题
                question_index = i + j * 24
                if question_index < len(self.answers):
                    dimension_scores[i] += self.answers[question_index]
        
        return dimension_scores
    
    def show_results(self):
        # 清除当前界面
        for widget in self.root.winfo_children():
            widget.destroy()
        
        dimension_scores = self.calculate_dimension_scores()
        
        # 将维度和分数配对并排序
        scored_dimensions = list(zip(self.dimension_names, dimension_scores))
        scored_dimensions.sort(key=lambda x: x[1], reverse=True)
        
        # 创建结果显示界面
        ttk.Label(
            self.root, 
            text="VIA人格测试结果", 
            font=('Arial', 16, 'bold')
        ).pack(pady=20)
        
        # 显示前5个最高分的维度
        self.result_pages = []
        for i in range(5):
            if i < len(scored_dimensions):
                name, score = scored_dimensions[i]
                page = ttk.Frame(self.root)
                ttk.Label(
                    page, 
                    text=f"第{i+1}名: {name}", 
                    font=('Arial', 14, 'bold')
                ).pack(pady=10)
                ttk.Label(
                    page, 
                    text=f"得分: {score}", 
                    font=('Arial', 12)
                ).pack(pady=5)
                # 这里可以添加更多关于这个维度的描述
                self.result_pages.append(page)
        
        # 添加导航按钮
        self.current_page = 0
        self.show_result_page()
        
        button_frame = ttk.Frame(self.root)
        button_frame.pack(pady=20)
        
        ttk.Button(
            button_frame, 
            text="上一页", 
            command=self.prev_result_page
        ).pack(side=tk.LEFT, padx=10)
        
        ttk.Button(
            button_frame, 
            text="下一页", 
            command=self.next_result_page
        ).pack(side=tk.LEFT, padx=10)
    
    def show_result_page(self):
        # 隐藏所有结果页面
        for page in self.result_pages:
            page.pack_forget()
        
        # 显示当前页面
        if self.current_page < len(self.result_pages):
            self.result_pages[self.current_page].pack(pady=10)
    
    def prev_result_page(self):
        if self.current_page > 0:
            self.current_page -= 1
            self.show_result_page()
    
    def next_result_page(self):
        if self.current_page < len(self.result_pages) - 1:
            self.current_page += 1
            self.show_result_page()

if __name__ == "__main__":
    root = tk.Tk()
    root.geometry("600x400")
    app = VIAPersonalityTest(root)
    root.mainloop()
